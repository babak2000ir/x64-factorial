     1                                  default rel
     2                                  bits 64
     3                                  
     4                                  segment .data
     5 00000000 666163746F7269616C-         fmt db "factorial is: %d", 0xd, 0xa, 0
     5 00000009 2069733A2025640D0A-
     5 00000012 00                 
     6                                  
     7                                  segment .text
     8                                  
     9                                  global main
    10                                  global factorial
    11                                  
    12                                  extern _CRT_INIT
    13                                  extern ExitProcess
    14                                  extern printf
    15                                  
    16                                  factorial:
    17 00000000 55                          push    rbp
    18 00000001 4889E5                      mov     rbp, rsp
    19 00000004 4883EC20                    sub     rsp, 32
    20                                  
    21 00000008 85C9                        test    ecx, ecx   ; if (n == 0) return 1; ecx = n, first integer argument
    22 0000000A 7416                        jz      .zero
    23                                  
    24 0000000C BB01000000                  mov    ebx, 1       ; counter c
    25 00000011 B801000000                  mov    eax, 1       ; result
    26                                  
    27 00000016 FFC1                        inc    ecx
    28                                  
    29                                  .for_loop:
    30 00000018 39CB                        cmp    ebx, ecx
    31 0000001A 740B                        je     .end_loop
    32                                  
    33 0000001C F7E3                        mul    ebx          ; multiply ebx * eax and store in eax
    34                                  
    35 0000001E FFC3                        inc    ebx          ; ++c
    36 00000020 EBF6                        jmp    .for_loop
    37                                  
    38                                  .zero:
    39 00000022 B801000000                  mov    eax, 1     ; return 1; eax = return value
    40                                  
    41                                  .end_loop:
    42 00000027 C9                          leave
    43 00000028 C3                          ret
    44                                  
    45                                  main:
    46 00000029 55                          push    rbp
    47 0000002A 4889E5                      mov     rbp, rsp
    48 0000002D 4883EC20                    sub     rsp, 32
    49                                  
    50 00000031 E8(00000000)                call    _CRT_INIT
    51                                  
    52 00000036 B90A000000                  mov     rcx, 10      ; n = 5
    53 0000003B E8C0FFFFFF                  call    factorial
    54                                  
    55 00000040 488D0D(00000000)            lea     rcx, [fmt]   ; *fmt -> "factorial is: %d"
    56 00000047 4889C2                      mov     rdx, rax    ; rax = factorial(5)
    57 0000004A E8(00000000)                call    printf      ; printf(*fmt, rax);
    58                                  
    59 0000004F 4831C0                      xor     rax, rax
    60 00000052 E8(00000000)                call    ExitProcess
